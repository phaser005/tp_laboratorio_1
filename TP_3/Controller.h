#ifndef controller_H_INCLUDED
#define _H_INCLUDED

////////////////////////////////////////////////////////////////////////////////////
/////////////        controller_loadFromText     ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief Opens a .csv file to parse its data.
*
*\param char path path to the text file
*\param pArrayListEmployee pointer to the linkedlist
*\return returnValue 0 if everything is ok, -1 if the file couldn't be opened
*
*/
int controller_loadFromText(char* path , LinkedList* pArrayListEmployee);

////////////////////////////////////////////////////////////////////////////////////
///////////        controller_loadFromBinary     ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief Opens a .bin file to parse its data.
*
*\param char path path to the text file
*\param pArrayListEmployee pointer to the linkedlist
*\return returnValue 0 if everything is ok, -1 if the file couldn't be opened
*
*/
int controller_loadFromBinary(char* path , LinkedList* pArrayListEmployee);

////////////////////////////////////////////////////////////////////////////////////
//////////////        controller_addEmployee     ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief asks the user for input and adds that data to a new employee
*
*\param pArrayListEmployee pointer to the linkedlist
*\return 1 if everything is ok, -1 if the employee pointer is NULL
*
*/
int controller_addEmployee(LinkedList* pArrayListEmployee);

////////////////////////////////////////////////////////////////////////////////////
//////////////        controller_editEmployee     ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief Modifies the data of an employee registered in the linkedlist.
*
*\param pArrayListEmployee pointer to the linkedlist
*\return 1 if everything is ok, -1 if the entered ID is nonexistant
*/
int controller_editEmployee(LinkedList* pArrayListEmployee);

////////////////////////////////////////////////////////////////////////////////////
///////////        controller_removeEmployee     ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief Removes an employee registered in the linkedlist.
*
*\param pArrayListEmployee pointer to the linkedlist
*\return 1 if everything is ok, -1 if the operation is canceled
*
*/
int controller_removeEmployee(LinkedList* pArrayListEmployee);

////////////////////////////////////////////////////////////////////////////////////
/////////////        controller_ListEmployee     ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief Lists all employees registered in the linkedlist.
*
*\param pArrayListEmployee pointer to the linkedlist
*\return 0 if everything is ok, -1 if linked list pointer is NULL
*
*/
int controller_ListEmployee(LinkedList* pArrayListEmployee);

////////////////////////////////////////////////////////////////////////////////////
/////////////        controller_sortEmployee     ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief Sorts all the employees registered in the linkedlist by certain criteria.
*
*\param pArrayListEmployee pointer to the linkedlist
*\return 0 if everything is ok, -1 if linked list pointer is NULL
*
*/
int controller_sortEmployee(LinkedList* pArrayListEmployee);

////////////////////////////////////////////////////////////////////////////////////
///////////////        controller_saveAsText     ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief Creates a .csv text file to save the employees data
*
*\param char path path to the text file
*\param pArrayListEmployee pointer to the linkedlist
*\return 0 if everything is ok, -1 if linked list pointer is NULL, -2 if it Couldn't create the archive, -3 if the file was not written correctly
*
*/
int controller_saveAsText(char* path , LinkedList* pArrayListEmployee);

////////////////////////////////////////////////////////////////////////////////////
/////////////        controller_saveAsBinary     ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief Creates a .bin file to save the employees data
*
*\param char path path to the text file
*\param pArrayListEmployee pointer to the linkedlist
*\return 0 if everything is ok, -1 if linked list pointer is NULL, -2 if it Couldn't create the archive, -3 if the file was not written correctly
*
*/
int controller_saveAsBinary(char* path , LinkedList* pArrayListEmployee);

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////        menu     ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief Shows the main menu
*
*\return int selected option
*
*/
int menu(void);

////////////////////////////////////////////////////////////////////////////////////
//////////////////////////        modify_menu    ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief Shows the modify employee menu
*
*\return int selected option
*
*/
int modify_menu(void);

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////        sort_menu    ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** \brief Shows the sort employee menu
*
*\return int selected option
*
*/
int sort_menu(void);

#endif // controller_H_INCLUDED
